#!/usr/bin/env python3
"""
Test script to check what dimensions the current ColQwen2 model generates
"""

import torch
import numpy as np
from PIL import Image
import io
import requests
from app.models.model_loader import ModelManager
import logging

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_model_dimensions():
    """Test the dimensions of embeddings generated by the current model"""
    try:
        print("=== Testing Model Dimensions ===")
        
        # Initialize model manager
        print("Loading model...")
        model_manager = ModelManager()
        
        # Create a simple test image
        print("Creating test image...")
        test_image = Image.new('RGB', (224, 224), color='red')
        
        # Process the image
        print("Processing image with model...")
        image_embedding = model_manager.process_image(test_image)
        
        print(f"Image embedding shape: {image_embedding.shape}")
        print(f"Image embedding dimensions: {len(image_embedding.flatten())}")
        
        # Process a test query
        print("Processing query with model...")
        query_embedding = model_manager.process_query("test query")
        
        print(f"Query embedding shape: {query_embedding.shape}")
        print(f"Query embedding dimensions: {len(query_embedding.flatten())}")
        
        # Check if they are compatible for similarity calculation
        print(f"\nCompatibility check:")
        print(f"Image embedding flattened: {image_embedding.flatten().shape}")
        print(f"Query embedding flattened: {query_embedding.flatten().shape}")
        
        # Try similarity calculation
        try:
            img_flat = image_embedding.flatten()
            query_flat = query_embedding.flatten()
            
            if len(img_flat) == len(query_flat):
                score = np.dot(img_flat, query_flat) / (np.linalg.norm(img_flat) * np.linalg.norm(query_flat))
                print(f"Similarity calculation successful: {score}")
            else:
                print(f"DIMENSION MISMATCH: {len(img_flat)} vs {len(query_flat)}")
                
        except Exception as e:
            print(f"Error in similarity calculation: {e}")
        
    except Exception as e:
        print(f"Error in model testing: {e}")
        logger.error(f"Model testing failed: {e}", exc_info=True)

if __name__ == "__main__":
    test_model_dimensions()
